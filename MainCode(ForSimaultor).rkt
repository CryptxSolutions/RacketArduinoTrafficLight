#lang racket

(require "AsipSimulated.rkt" "AsipButtonsSimulated.rkt")

(define lights (list 11 12 13 7 8 9 2 3 4 )) ; LEDs: (Red, Amber, Green, Red, Amber, Green, Red, Amber, Green)
(define ped 5)

(define stop-button-pin 6)

(define setup 
  (λ ()
    ;; connect to the Arduino:
    (open-asip)  
    ;; Set pins to OUTPUT_MODE
    (map (λ (x) (set-pin-mode x OUTPUT_MODE)) lights)
    
    ;; Turn the  lights off
    (map (λ (x) (digital-write x LOW)) lights)

    ; set button pin as inputs
    (set-pin-mode! stop-button-pin INPUT_MODE)

    (set-pin-mode! ped OUTPUT_MODE)


    
    )
  )

(define currentState 1)
;; The button hash, what happens when you click the button on state x (hash "b" y), will change to state y.
(define states (hash 
                1 (hash "b" 2 "s" 4 )
                2 (hash "b" 3 "s" 4 )
                3 (hash "b" 4 "s" 4 )
                4 (hash "b" 5 "s" 4 )
                5 (hash "b" 6 "s" 4 )
                6 (hash "b" 7 "s" 4 )
                7 (hash "b" 8 "s" 4 )
                8 (hash "b" 9 "s" 4 )
                9 (hash "b" 10 "s" 4 )
                10 (hash "b" 11 "s" 4 )
                11 (hash "b" 12 "s" 4 )
                12 (hash "b" 1 "s" 4 )
                )
  )


(define lightStates (hash 
                     1 (list 1 0 0  1 0 0  1 0 0)  
                     2 (list 1 1 0  1 0 0  1 0 0) 
                     3 (list 0 0 1  1 0 0  1 0 0) 
                     4 (list 0 1 0  1 0 0  1 0 0)
                     5 (list 1 0 0  1 0 0  1 0 0) 
                     6 (list 1 0 0  1 1 0  1 0 0) 
                     7 (list 1 0 0  0 0 1  1 0 0) 
                     8 (list 1 0 0  0 1 0  1 0 0)                     
                     9 (list 1 0 0  1 0 0  1 0 0)
                     10 (list 1 0 0  1 0 0  1 1 0)
                     11 (list 1 0 0  1 0 0  0 0 1)
                     12 (list 1 0 0  1 0 0  0 1 0) 
                     ))

(define getNextState (λ (state event) 
                       (hash-ref (hash-ref states state 0) event 0)
                       ))
         
(define setLights (λ (lightPins vals) 
                    (cond [(not (empty? lightPins))
                           (cond [(equal? (first vals) 1)
                                  (digital-write (first lightPins) HIGH)
                                  (printf "Setting light ~s to HIGH\n" (first lightPins) )
                                  ]
                                 (else
                                  (digital-write (first lightPins) LOW)
                                  (printf "Setting light ~s to LOW\n" (first lightPins) )
                                  )
                                 )
                           (setLights (rest lightPins) (rest vals))
                           ]
                          )
                    )
  )

(define (state)
  (setLights lights (hash-ref lightStates currentState))
  )

(define nextState (λ (ev)
                    (let ([newState (getNextState currentState ev)])
                      (cond [ (not (equal? newState 0))
                              (set! currentState newState)
                              (state)
                              (printf "new state ~a\n"  currentState)
                              ])
                      )
                    ))

(on-button-pressed stop-button-pin (λ () (sequence)))


(define CheckBtnPressed (λ () (cond
                                ((equal? (digital-read #t) 0)))))

(define sequence (λ ()
                   (if (equal? (digital-read 6) #t) ((printf "BtnPressed")(CheckState)) (printf ""))))




(define CheckState (λ () (
                          (if (equal? currentState 1) ((printf "State 1\n")(Crossing)) (printf "Not State 1\n"))
                          (if (equal? currentState 2) ((printf "State 2\n")(3-r)) (printf "Not State 2\n"))
                          (if (equal? currentState 3) ((printf "State 3\n")(2-r)) (printf "Not State 3\n"))
                          (if (equal? currentState 4) ((printf "State 4\n")(1-r)) (printf "Not State 4\n"))
                          (if (equal? currentState 5) ((printf "State 5\n")(Crossing)) (printf "Not State 5\n"))
                          (if (equal? currentState 6) ((printf "State 6\n")(3-r)) (printf "Not State 6\n"))
                          (if (equal? currentState 7) ((printf "State 7\n")(3-r)) (printf "Not State 7\n"))
                          (if (equal? currentState 8) ((printf "State 8\n")(3-r)) (printf "Not State 8\n"))
                          (if (equal? currentState 9) ((printf "State 9\n")(Crossing)) (printf "Not State 9\n"))
                          (if (equal? currentState 10) ((printf "State 10\n")(3-r)) (printf "Not State 10\n"))
                          (if (equal? currentState 11) ((printf "State 11\n")(2-r)) (printf "Not State 11\n"))
                          (if (equal? currentState 12) ((printf "State 12\n")(1-r)) (printf "Not State 12\n"))
                          )))

(define 3-r (λ () (
                   (sleep 1)
                   (nextState "b")
                   (sleep 5)
                   (nextState "b")
                   (sleep 1)
                   (nextState "b")
                   (Crossing))))

(define 2-r (λ () (
                   (sleep 5)
                   (nextState "b")
                   (sleep 1)
                   (nextState "b")
                   (Crossing))))

(define 1-r (λ () (
                   (sleep 1)
                   (nextState "b")
                   (Crossing))))


(define Crossing (λ () (
                    (digital-write ped HIGH)
                     (sleep 1)
                     (digital-write ped LOW)
                     (sleep 1)
                                          (digital-write ped HIGH)
                     (sleep 1)
                     (digital-write ped LOW)
                     (sleep 1)
                                          (digital-write ped HIGH)
                     (sleep 1)
                     (digital-write ped LOW)
                     (sleep 1)
                                          (digital-write ped HIGH)
                     (sleep 1)
                     (digital-write ped LOW)
                     (sleep 1)
                                          (digital-write ped HIGH)
                     (sleep 1)
                     (digital-write ped LOW)
                     (sleep 1)

                        
                        (printf "Crossing")
                        (waitCheck)
                        )))

(define waitCheck (λ () (cond
                        ((= currentState 1) (wait5))
                        ((= currentState 2) (wait1))
                        ((= currentState 3) (wait5))
                        ((= currentState 4) (wait1))
                        ((= currentState 5) (wait5))
                        ((= currentState 6) (wait1))
                        ((= currentState 7) (wait5))
                        ((= currentState 8) (wait1))
                        ((= currentState 9) (wait5))
                        ((= currentState 10) (wait1))
                        ((= currentState 11) (wait5))
                        ((= currentState 12) (wait1))
                    )))
                        
(define wait1 (λ () (                        
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (nextState "b")
                     (waitCheck)
                     )))


                     
(define wait5 (λ () (
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (sleep 0.10)
                     (sequence)
                     (nextState "b")
                     (waitCheck)
                     )))
                     
                             
(setup)
(state)
